
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDleftORleftIMPLICATIONBICONDITIONALleftNOTAND BICONDITIONAL IMPLICATION LPAREN NOT OR PROPOSITION RPARENstatement : expressionexpression : PROPOSITIONexpression : expression AND expressionexpression : expression OR expressionexpression : expression IMPLICATION expressionexpression : expression BICONDITIONAL expressionexpression : NOT expressionexpression : LPAREN expression RPAREN'
    
_lr_action_items = {'PROPOSITION':([0,4,5,6,7,8,9,],[3,3,3,3,3,3,3,]),'NOT':([0,4,5,6,7,8,9,],[4,4,4,4,4,4,4,]),'LPAREN':([0,4,5,6,7,8,9,],[5,5,5,5,5,5,5,]),'$end':([1,2,3,10,12,13,14,15,16,],[0,-1,-2,-7,-3,-4,-5,-6,-8,]),'AND':([2,3,10,11,12,13,14,15,16,],[6,-2,-7,6,-3,-4,-5,-6,-8,]),'OR':([2,3,10,11,12,13,14,15,16,],[7,-2,-7,7,7,-4,-5,-6,-8,]),'IMPLICATION':([2,3,10,11,12,13,14,15,16,],[8,-2,-7,8,8,8,-5,-6,-8,]),'BICONDITIONAL':([2,3,10,11,12,13,14,15,16,],[9,-2,-7,9,9,9,-5,-6,-8,]),'RPAREN':([3,10,11,12,13,14,15,16,],[-2,-7,16,-3,-4,-5,-6,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,4,5,6,7,8,9,],[2,10,11,12,13,14,15,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement_expr','grammar.py',54),
  ('expression -> PROPOSITION','expression',1,'p_expression_proposition','grammar.py',59),
  ('expression -> expression AND expression','expression',3,'p_expression_and','grammar.py',64),
  ('expression -> expression OR expression','expression',3,'p_expression_or','grammar.py',69),
  ('expression -> expression IMPLICATION expression','expression',3,'p_expression_implication','grammar.py',74),
  ('expression -> expression BICONDITIONAL expression','expression',3,'p_expression_biconditional','grammar.py',79),
  ('expression -> NOT expression','expression',2,'p_expression_negation','grammar.py',84),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','grammar.py',89),
]
